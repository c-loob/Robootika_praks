#include <opencv2\opencv.hpp>
#include <opencv2\highgui.hpp>
#include <opencv2\imgproc.hpp>
#include <iostream>
#include <vector>
#include <opencv2\features2d.hpp>


using namespace cv;
using namespace std;

int main() {
	VideoCapture cap(1);//enter cam # or video location
	if (!cap.isOpened()) return -1; //check if succeeded

	cap.set(CAP_PROP_FRAME_WIDTH, 640);//feed resolution from webcam
	cap.set(CAP_PROP_FRAME_HEIGHT, 480);

	namedWindow("frame", WINDOW_AUTOSIZE);//captured img
	namedWindow("control", WINDOW_AUTOSIZE);//trackbaride aken

	//initial values for trackbars
	int lowH = 0;
	int highH = 25;

	int lowS = 84;
	int highS = 255;

	int lowV = 22;
	int highV = 255;

	int hi = 100, lo = 80;

	//trackbar creation
	//createTrackbar("hi", "control", &hi, 255);
	//createTrackbar("lo", "control", &lo, 255);

	createTrackbar("LowH", "control", &lowH, 179);//hue
	createTrackbar("HighH", "control", &highH, 179);

	createTrackbar("LowS", "control", &lowS, 255);//saturation
	createTrackbar("HighS", "control", &highS, 255);

	createTrackbar("LowV", "control", &lowV, 255);//value
	createTrackbar("HighV", "control", &highV, 255);

	

	
	vector<KeyPoint> keypoints;
	SimpleBlobDetector::Params params;
	params.filterByArea = true;
	params.minArea = 50;
	//params.minThreshold = lo;
	//params.maxThreshold = hi;
	params.filterByColor = true;
	params.blobColor = 255;
	params.filterByConvexity = true;
	params.minConvexity = 0.8;
	params.maxConvexity = 1;
	//params.filterByCircularity = true;
	//params.minCircularity = 0.75; //kui ring on? 1 = max ring
	//params.maxCircularity = 1;
	
	Ptr<SimpleBlobDetector> detector = SimpleBlobDetector::create(params);
	
	Size imgSize(cvSize(640, 480));

	
	for (;;) {
		Mat frame, gray;//frame
		cap >> frame;
		if (!cap.read(frame)) break;//check for error

		//HSV threshold:
		Mat frameHSV, hsv_channels[3];//frame in HSV
		cvtColor(frame, frameHSV, COLOR_BGR2HSV);//to HSV color space
		cvtColor(frame, gray, COLOR_BGR2GRAY);
		Mat frameThresh;//frame post thresh
		inRange(frameHSV, Scalar(lowH, lowS, lowV), Scalar(highH, highS, highV), frameThresh);//threshold img in ranges
		
		erode(frameThresh, frameThresh, Mat(), Point(-1, -1), 3);
		dilate(frameThresh, frameThresh, Mat(), Point(-1,-1), 3);
		
		Mat gauss;
		GaussianBlur(frameThresh, frameThresh, Size(5,5), 1.5,1.5);
	
		detector->detect(frameThresh, keypoints);
		Mat im_keyp;
		drawKeypoints(frameThresh, keypoints, im_keyp, Scalar(0, 0, 255), DrawMatchesFlags::DRAW_RICH_KEYPOINTS);
		
		imshow("processed", gray);
		imshow("key", im_keyp);
		imshow("frame", frame);
		if (waitKey(30) >= 0) break;//nupuvajutuse peale break

	}

	//destroyWindow("frame");
	return 0;
}
